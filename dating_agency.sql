    /************************************************************
      BIURO MATRYMONIALNE
     ************************************************************/
SET SERVEROUTPUT ON; 

    /************************************************************
      Definicje Typów i Ciał
     ************************************************************/
     
CREATE OR REPLACE TYPE TypAdres AS OBJECT (
    ulica          VARCHAR2(100),
    nr_domu        VARCHAR2(10),
    nr_mieszkania  VARCHAR2(10),
    kod_pocztowy   VARCHAR2(10),
    miasto         VARCHAR2(50),
    MEMBER FUNCTION pokaz_adres RETURN VARCHAR2
);
/

CREATE OR REPLACE TYPE BODY TypAdres AS
    MEMBER FUNCTION pokaz_adres RETURN VARCHAR2 IS
    BEGIN
        RETURN ulica || ' ' || nr_domu 
               || CASE 
                     WHEN nr_mieszkania IS NOT NULL THEN '/' || nr_mieszkania 
                     ELSE '' 
                  END
               || ', ' || kod_pocztowy || ' ' || miasto;
    END pokaz_adres;
END;
/

-- Definicja TypOsoba
CREATE OR REPLACE TYPE TypOsoba
AS OBJECT (
    osoba_id       NUMBER,
    imie           VARCHAR2(50),
    nazwisko       VARCHAR2(50),
    data_urodzenia DATE,
    adres          TypAdres,  
    MEMBER PROCEDURE pokaz_dane,
    MEMBER FUNCTION get_imie_nazwisko RETURN VARCHAR2
) NOT FINAL;
/

CREATE OR REPLACE TYPE BODY TypOsoba AS
    MEMBER PROCEDURE pokaz_dane IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('Osoba ID: ' || osoba_id);
        DBMS_OUTPUT.PUT_LINE('Imię i nazwisko: ' || imie || ' ' || nazwisko);
        DBMS_OUTPUT.PUT_LINE('Data urodzenia: ' || TO_CHAR(data_urodzenia, 'YYYY-MM-DD'));
        DBMS_OUTPUT.PUT_LINE('Adres: ' || adres.pokaz_adres());
    END pokaz_dane;

    MEMBER FUNCTION get_imie_nazwisko RETURN VARCHAR2 IS
    BEGIN
        RETURN imie || ' ' || nazwisko;
    END;
END;
/

-- Definicja TypKlient
CREATE OR REPLACE TYPE TypKlient UNDER TypOsoba (
    status_klienta   VARCHAR2(20),  
    preferencje      VARCHAR2(200),
    MEMBER FUNCTION pelne_dane RETURN VARCHAR2
);
/

CREATE OR REPLACE TYPE BODY TypKlient AS
    MEMBER FUNCTION pelne_dane RETURN VARCHAR2 IS
    BEGIN
        RETURN 'Klient: ' || imie || ' ' || nazwisko 
               || ', Data urodzenia: ' || TO_CHAR(data_urodzenia, 'YYYY-MM-DD')
               || ', Miasto: ' || adres.miasto
               || ', Status: ' || status_klienta
               || ', Preferencje: ' || preferencje
               || ', Cechy: ' || cechy
               || ', Płeć: ' || plec;
    END;
END;

/

ALTER TYPE TypKlient ADD ATTRIBUTE cechy VARCHAR2(500) CASCADE;


-- Definicja TypRandka
CREATE OR REPLACE TYPE TypRandka AS OBJECT (
    randka_id       NUMBER,
    data_spotkania  DATE,
    miejsce         VARCHAR2(100),
    klient1_ref     REF TypKlient, 
    klient2_ref     REF TypKlient, 
    MEMBER FUNCTION opis RETURN VARCHAR2
);
/

CREATE OR REPLACE TYPE BODY TypRandka AS
    MEMBER FUNCTION opis RETURN VARCHAR2 IS
    BEGIN
        RETURN 'Randka ID: ' || randka_id 
               || ', data: ' || TO_CHAR(data_spotkania, 'YYYY-MM-DD')
               || ', miejsce: ' || miejsce;
    END opis;
END;
/

CREATE OR REPLACE TYPE KlientRefTab AS TABLE OF REF TypKlient;
/

CREATE OR REPLACE TYPE TypOpiekun AS OBJECT (
    opiekun_id   NUMBER,
    imie         VARCHAR2(50),
    nazwisko     VARCHAR2(50),
    podopieczni  KlientRefTab,       
    MEMBER FUNCTION pokaz_opiekuna RETURN VARCHAR2
);
/

CREATE OR REPLACE TYPE BODY TypOpiekun AS
    MEMBER FUNCTION pokaz_opiekuna RETURN VARCHAR2 IS
    BEGIN
        RETURN 'Opiekun: ' || imie || ' ' || nazwisko 
               || ' (ID=' || opiekun_id || ')';
    END pokaz_opiekuna;
END;
/

CREATE TABLE KlienciObjTable OF TypKlient (
    CONSTRAINT pk_klienci_obj PRIMARY KEY (osoba_id)
)
OBJECT IDENTIFIER IS PRIMARY KEY;
/

CREATE TABLE RandkiObjTable OF TypRandka (
    CONSTRAINT pk_randki_obj PRIMARY KEY (randka_id)
);
/

-- Tabela OpiekunowieObjTable z NESTED TABLE
CREATE TABLE OpiekunowieObjTable OF TypOpiekun (
    CONSTRAINT pk_opiekun PRIMARY KEY (opiekun_id)
)
NESTED TABLE podopieczni STORE AS podopieczni_storage
RETURN AS LOCATOR;
/

CREATE TABLE OpinieRandek (
    opinia_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    randka_id NUMBER REFERENCES RandkiObjTable(randka_id),
    klient_id NUMBER REFERENCES KlienciObjTable(osoba_id),
    ocena NUMBER CHECK (ocena BETWEEN 1 AND 5),
    komentarz CLOB
);
/
ALTER TABLE podopieczni_storage
ADD CONSTRAINT pk_podopieczni PRIMARY KEY (NESTED_TABLE_ID);

ALTER TABLE RandkiObjTable
    ADD SCOPE FOR (klient1_ref) IS KlienciObjTable;

ALTER TABLE RandkiObjTable
    ADD SCOPE FOR (klient2_ref) IS KlienciObjTable;

ALTER TYPE TypKlient 
ADD ATTRIBUTE plec VARCHAR2(10) CASCADE;

ALTER TYPE TypKlient 
ADD ATTRIBUTE orientacja_seksualna VARCHAR2(30) CASCADE;

ALTER TYPE TypKlient 
ADD ATTRIBUTE preferowany_min_wiek NUMBER CASCADE;

ALTER TYPE TypKlient 
ADD ATTRIBUTE preferowany_max_wiek NUMBER CASCADE;


ALTER TABLE podopieczni_storage
  ADD SCOPE FOR (COLUMN_VALUE) IS KlienciObjTable;

ALTER TABLE podopieczni_storage 
  DROP CONSTRAINT pk_podopieczni;


/
    /************************************************************
      Tworzenie Pakietów (implementacha logiki biznesowej)
     ************************************************************/
CREATE OR REPLACE PACKAGE PakietBiuro AS
    
    TYPE refCursorKlient IS REF CURSOR;
    TYPE refCursorOpiekun IS REF CURSOR;
    TYPE refCursorRandka  IS REF CURSOR;

    PROCEDURE dodaj_klienta(
        p_osoba_id           NUMBER,
        p_imie               VARCHAR2,
        p_nazwisko           VARCHAR2,
        p_data_ur            DATE,
        p_ulica              VARCHAR2,
        p_nr_domu            VARCHAR2,
        p_nr_mieszkania      VARCHAR2,
        p_kod_pocztowy       VARCHAR2,
        p_miasto             VARCHAR2,
        p_status             VARCHAR2,
        p_preferencje        VARCHAR2,
        p_cechy              VARCHAR2,
        p_plec               VARCHAR2,
        p_orientacja_seksualna VARCHAR2,
        p_min_wiek           NUMBER,
        p_max_wiek           NUMBER
    );

    PROCEDURE wyswietl_klienta(p_osoba_id NUMBER);

    FUNCTION pobierz_klientow RETURN refCursorKlient;

    PROCEDURE dodaj_opiekuna(
        p_opiekun_id NUMBER,
        p_imie       VARCHAR2,
        p_nazwisko   VARCHAR2
    );
    
    PROCEDURE dodaj_klienta_do_opiekuna(
    p_opiekun_id NUMBER,
    p_osoba_id   NUMBER
);

    FUNCTION pobierz_opiekunow RETURN refCursorOpiekun;

    PROCEDURE pokaz_podopiecznych(p_opiekun_id IN NUMBER);

    PROCEDURE dodaj_randke(
        p_randka_id      NUMBER,
        p_data_spotkania DATE,
        p_miejsce        VARCHAR2,
        p_klient1_id     NUMBER,
        p_klient2_id     NUMBER
    );

    FUNCTION pobierz_randki RETURN refCursorRandka;

    PROCEDURE znajdz_pare(
        p_osoba_id       NUMBER,
        p_wynik          OUT refCursorKlient
    );

PROCEDURE dodaj_opinie(
    p_randka_id NUMBER,
    p_klient_id NUMBER,
    p_ocena NUMBER,
    p_komentarz CLOB
);

PROCEDURE historia_randek(
    p_klient_id NUMBER,
    p_wynik OUT refCursorRandka
);

PROCEDURE wyszukaj_klienta_po_cechach(
    p_cechy_zadane IN VARCHAR2,
    p_wynik OUT refCursorKlient
);

END PakietBiuro;

/

CREATE OR REPLACE PACKAGE BODY PakietBiuro AS

    /************************************************************
      1) OBS?UGA KLIENTÓW
     ************************************************************/
  PROCEDURE dodaj_klienta(
    p_osoba_id           NUMBER,
    p_imie               VARCHAR2,
    p_nazwisko           VARCHAR2,
    p_data_ur            DATE,
    p_ulica              VARCHAR2,
    p_nr_domu            VARCHAR2,
    p_nr_mieszkania      VARCHAR2,
    p_kod_pocztowy       VARCHAR2,
    p_miasto             VARCHAR2,
    p_status             VARCHAR2,
    p_preferencje        VARCHAR2,
    p_cechy              VARCHAR2,
    p_plec               VARCHAR2,
    p_orientacja_seksualna VARCHAR2,
    p_min_wiek           NUMBER,
    p_max_wiek           NUMBER
) IS
BEGIN
    INSERT INTO KlienciObjTable
    VALUES (
        TypKlient(
            p_osoba_id,
            p_imie,
            p_nazwisko,
            p_data_ur,
            TypAdres(p_ulica, p_nr_domu, p_nr_mieszkania, p_kod_pocztowy, p_miasto),
            p_status,
            p_preferencje,
            p_cechy,
            p_plec,
            p_orientacja_seksualna,
            p_min_wiek,
            p_max_wiek
        )
    );

    DBMS_OUTPUT.PUT_LINE('Dodano klienta o ID=' || p_osoba_id);
END dodaj_klienta;

    PROCEDURE wyswietl_klienta(p_osoba_id NUMBER) IS
        v_klient TypKlient;
    BEGIN
        SELECT VALUE(k)
        INTO v_klient
        FROM KlienciObjTable k
        WHERE k.osoba_id = p_osoba_id;

        DBMS_OUTPUT.PUT_LINE('*** Dane klienta ***');
        DBMS_OUTPUT.PUT_LINE(v_klient.pelne_dane);
        DBMS_OUTPUT.PUT_LINE('Adres: ' || v_klient.adres.pokaz_adres());
        DBMS_OUTPUT.PUT_LINE('********************');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Brak klienta o ID=' || p_osoba_id);
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('B??d (wyswietl_klienta): ' || SQLERRM);
    END wyswietl_klienta;


    FUNCTION pobierz_klientow RETURN refCursorKlient IS
        v_cursor refCursorKlient;
    BEGIN

        OPEN v_cursor FOR
            SELECT VALUE(k)
            FROM KlienciObjTable k;
        RETURN v_cursor;
    END pobierz_klientow;



    /************************************************************
      2) OBS?UGA OPIEKUNÓW
     ************************************************************/
    PROCEDURE dodaj_opiekuna(
        p_opiekun_id NUMBER,
        p_imie       VARCHAR2,
        p_nazwisko   VARCHAR2
    ) IS
    BEGIN
        INSERT INTO OpiekunowieObjTable
        VALUES(
            TypOpiekun(
                opiekun_id   => p_opiekun_id,
                imie         => p_imie,
                nazwisko     => p_nazwisko,
                podopieczni  => KlientRefTab()  
            )
        );

        DBMS_OUTPUT.PUT_LINE('Dodano nowego opiekuna o ID=' || p_opiekun_id);
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Błąd: Opiekun o ID='||p_opiekun_id||' już istnieje!');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Błąd (dodaj_opiekuna): ' || SQLERRM);
    END dodaj_opiekuna;


 PROCEDURE dodaj_klienta_do_opiekuna(
    p_opiekun_id NUMBER,
    p_osoba_id   NUMBER
) IS
    v_opiekun      TypOpiekun;
    v_klient_ref   REF TypKlient;
BEGIN
    -- Pobranie opiekuna
    SELECT VALUE(o)
    INTO v_opiekun
    FROM OpiekunowieObjTable o
    WHERE o.opiekun_id = p_opiekun_id;

    -- Pobranie REF klienta
    SELECT REF(k)
    INTO v_klient_ref
    FROM KlienciObjTable k
    WHERE k.osoba_id = p_osoba_id;

    -- Dodanie klienta do listy podopiecznych
    v_opiekun.podopieczni.EXTEND(1); -- Powiększenie kolekcji o 1
    v_opiekun.podopieczni(v_opiekun.podopieczni.LAST) := v_klient_ref;

    -- Zaktualizowanie tabeli OpiekunowieObjTable
    UPDATE OpiekunowieObjTable o
    SET VALUE(o) = v_opiekun
    WHERE o.opiekun_id = p_opiekun_id;

    DBMS_OUTPUT.PUT_LINE('Dodano klienta o ID=' || p_osoba_id || ' do opiekuna ID=' || p_opiekun_id);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Błąd: Nie znaleziono opiekuna lub klienta.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd (dodaj_klienta_do_opiekuna): ' || SQLERRM);
END dodaj_klienta_do_opiekuna;


    FUNCTION pobierz_opiekunow RETURN refCursorOpiekun IS
        v_cursor refCursorOpiekun;
    BEGIN
        OPEN v_cursor FOR
            SELECT VALUE(o)
            FROM OpiekunowieObjTable o;
        RETURN v_cursor;
    END pobierz_opiekunow;

PROCEDURE pokaz_podopiecznych(p_opiekun_id IN NUMBER) IS
    v_opiekun TypOpiekun;
    v_podopieczny REF TypKlient;
    v_klient TypKlient;
BEGIN
    -- Pobierz opiekuna
    SELECT VALUE(o)
    INTO v_opiekun
    FROM OpiekunowieObjTable o
    WHERE o.opiekun_id = p_opiekun_id;

    IF v_opiekun.podopieczni IS NOT NULL THEN
        FOR i IN 1..v_opiekun.podopieczni.COUNT LOOP
            v_podopieczny := v_opiekun.podopieczni(i);
            
            SELECT DEREF(v_podopieczny)
            INTO v_klient
            FROM DUAL;

            DBMS_OUTPUT.PUT_LINE('Podopieczny ' || i || ': ' ||
                                 v_klient.imie || ' ' || v_klient.nazwisko);
        END LOOP;
    ELSE
        DBMS_OUTPUT.PUT_LINE('Opiekun o ID=' || p_opiekun_id || ' nie ma podopiecznych.');
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Nie znaleziono opiekuna o ID=' || p_opiekun_id);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Wystąpił błąd: ' || SQLERRM);
END pokaz_podopiecznych;


    /************************************************************
      3) OBSŁUGA RANDKI
     ************************************************************/
    PROCEDURE dodaj_randke(
        p_randka_id      NUMBER,
        p_data_spotkania DATE,
        p_miejsce        VARCHAR2,
        p_klient1_id     NUMBER,
        p_klient2_id     NUMBER
    ) IS
        v_kl1 REF TypKlient;
        v_kl2 REF TypKlient;
    BEGIN
        SELECT REF(k)
        INTO v_kl1
        FROM KlienciObjTable k
        WHERE k.osoba_id = p_klient1_id;
        
        SELECT REF(k)
        INTO v_kl2
        FROM KlienciObjTable k
        WHERE k.osoba_id = p_klient2_id;

        IF p_data_spotkania < SYSDATE THEN
            RAISE_APPLICATION_ERROR(-20003, 'Data spotkania nie może być w przeszłości!');
        END IF;
        
        INSERT INTO RandkiObjTable
        VALUES (
            TypRandka(
                p_randka_id,
                p_data_spotkania,
                p_miejsce,
                v_kl1,
                v_kl2
            )
        );
        DBMS_OUTPUT.PUT_LINE('Dodano randkę o ID=' || p_randka_id);

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            DBMS_OUTPUT.PUT_LINE('Błąd: nie znaleziono jednego z klientów!');
        WHEN DUP_VAL_ON_INDEX THEN
            DBMS_OUTPUT.PUT_LINE('Błąd: Randka o ID='||p_randka_id||' już istnieje!');
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('Błąd (dodaj_randke): ' || SQLERRM);
    END dodaj_randke;


    FUNCTION pobierz_randki RETURN refCursorRandka IS
        v_cursor refCursorRandka;
    BEGIN
        OPEN v_cursor FOR
            SELECT VALUE(r)
            FROM RandkiObjTable r;
        RETURN v_cursor;
    END pobierz_randki;

     PROCEDURE znajdz_pare(
        p_osoba_id NUMBER,
        p_wynik    OUT refCursorKlient
    ) IS
        v_count NUMBER;
    BEGIN
        ----------------------------------------------------------------------------
        -- 1) Najpierw zliczamy kandydatów:
        ----------------------------------------------------------------------------
        SELECT COUNT(*)
          INTO v_count
          FROM KlienciObjTable k
         WHERE k.osoba_id != p_osoba_id
           AND NOT EXISTS (
               SELECT 1
               FROM RandkiObjTable r
                    LEFT JOIN OpinieRandek opinia1
                           ON opinia1.randka_id = r.randka_id
                           AND opinia1.klient_id = p_osoba_id
                    LEFT JOIN OpinieRandek opinia2
                           ON opinia2.randka_id = r.randka_id
                           AND opinia2.klient_id = k.osoba_id
               WHERE r.randka_id IS NOT NULL
                 AND (
                    (DEREF(r.klient1_ref).osoba_id = p_osoba_id 
                     AND DEREF(r.klient2_ref).osoba_id = k.osoba_id)
                    OR
                    (DEREF(r.klient2_ref).osoba_id = p_osoba_id 
                     AND DEREF(r.klient1_ref).osoba_id = k.osoba_id)
                 )
                 AND (
                    (opinia1.ocena IS NOT NULL AND opinia1.ocena < 3)
                    OR
                    (opinia2.ocena IS NOT NULL AND opinia2.ocena < 3)
                 )
           )
           AND (
                0.15 * REGEXP_COUNT(
                         k.cechy,
                         '(' || REPLACE((SELECT preferencje 
                                         FROM KlienciObjTable
                                         WHERE osoba_id = p_osoba_id), 
                                        ',', '|') || ')',
                         1, 'i'
                       )
                +
                0.15 * REGEXP_COUNT(
                         (SELECT cechy
                          FROM KlienciObjTable
                          WHERE osoba_id = p_osoba_id),
                         '(' || REPLACE(k.preferencje, ',', '|') || ')',
                         1, 'i'
                       )
                +
                0.1 * CASE
                        WHEN k.preferowany_min_wiek <= (
                              SELECT EXTRACT(YEAR FROM SYSDATE) 
                                     - EXTRACT(YEAR FROM data_urodzenia)
                              FROM KlienciObjTable
                              WHERE osoba_id = p_osoba_id
                             )
                          AND k.preferowany_max_wiek >= (
                              SELECT EXTRACT(YEAR FROM SYSDATE) 
                                     - EXTRACT(YEAR FROM data_urodzenia)
                              FROM KlienciObjTable
                              WHERE osoba_id = p_osoba_id
                             )
                        THEN 1
                        ELSE 0
                      END
                +
                0.1 * CASE
                        WHEN (SELECT preferowany_min_wiek
                              FROM KlienciObjTable
                              WHERE osoba_id = p_osoba_id)
                             <= EXTRACT(YEAR FROM SYSDATE) 
                                - EXTRACT(YEAR FROM k.data_urodzenia)
                          AND (SELECT preferowany_max_wiek
                               FROM KlienciObjTable
                               WHERE osoba_id = p_osoba_id)
                             >= EXTRACT(YEAR FROM SYSDATE) 
                                - EXTRACT(YEAR FROM k.data_urodzenia)
                        THEN 1
                        ELSE 0
                      END
                +
                0.5 * CASE
                        WHEN
                           (
                             k.orientacja_seksualna = 'obojetnie'
                             OR
                             (k.orientacja_seksualna = 'mezczyzna'
                               AND (SELECT plec
                                    FROM KlienciObjTable
                                    WHERE osoba_id = p_osoba_id
                                   ) = 'mezczyzna')
                             OR
                             (k.orientacja_seksualna = 'kobieta'
                               AND (SELECT plec
                                    FROM KlienciObjTable
                                    WHERE osoba_id = p_osoba_id
                                   ) = 'kobieta')
                           )
                           AND
                           (
                             (SELECT orientacja_seksualna
                              FROM KlienciObjTable
                              WHERE osoba_id = p_osoba_id
                             ) = 'obojetnie'
                             OR
                             (
                               (SELECT orientacja_seksualna
                                FROM KlienciObjTable
                                WHERE osoba_id = p_osoba_id
                               ) = 'mezczyzna'
                               AND k.plec = 'mezczyzna'
                             )
                             OR
                             (
                               (SELECT orientacja_seksualna
                                FROM KlienciObjTable
                                WHERE osoba_id = p_osoba_id
                               ) = 'kobieta'
                               AND k.plec = 'kobieta'
                             )
                           )
                        THEN 1
                        ELSE 0
                      END
           ) > 0;

        IF v_count = 0 THEN
            DBMS_OUTPUT.PUT_LINE('Nie znaleziono pary.');
            OPEN p_wynik FOR
                SELECT VALUE(k)
                FROM KlienciObjTable k
                WHERE 1=0;  -- pusty zbiór
        ELSE
            ----------------------------------------------------------------------------
            -- 2) Otwieramy właściwe zapytanie z identyczną logiką (także ocena <3 wyklucza)
            ----------------------------------------------------------------------------
            OPEN p_wynik FOR
                SELECT VALUE(k)
                FROM KlienciObjTable k
                WHERE k.osoba_id != p_osoba_id
                  AND NOT EXISTS (
                      SELECT 1
                        FROM RandkiObjTable r
                             LEFT JOIN OpinieRandek opinia1
                                    ON opinia1.randka_id = r.randka_id
                                    AND opinia1.klient_id = p_osoba_id
                             LEFT JOIN OpinieRandek opinia2
                                    ON opinia2.randka_id = r.randka_id
                                    AND opinia2.klient_id = k.osoba_id
                       WHERE r.randka_id IS NOT NULL
                         AND (
                              (DEREF(r.klient1_ref).osoba_id = p_osoba_id
                               AND DEREF(r.klient2_ref).osoba_id = k.osoba_id)
                              OR
                              (DEREF(r.klient2_ref).osoba_id = p_osoba_id
                               AND DEREF(r.klient1_ref).osoba_id = k.osoba_id)
                             )
                         AND (
                              (opinia1.ocena IS NOT NULL AND opinia1.ocena < 3)
                              OR
                              (opinia2.ocena IS NOT NULL AND opinia2.ocena < 3)
                             )
                  )
                ORDER BY 
                  (
                    0.15 * REGEXP_COUNT(
                      k.cechy, 
                      '(' || REPLACE(
                         (SELECT preferencje 
                          FROM KlienciObjTable 
                          WHERE osoba_id = p_osoba_id
                         ), 
                         ',', '|'
                      ) || ')', 
                      1, 'i'
                    )
                    +
                    0.15 * REGEXP_COUNT(
                      (SELECT cechy 
                       FROM KlienciObjTable 
                       WHERE osoba_id = p_osoba_id), 
                      '(' || REPLACE(k.preferencje, ',', '|') || ')', 
                      1, 'i'
                    )
                    +
                    0.1 * CASE
                            WHEN k.preferowany_min_wiek <= (
                                 SELECT EXTRACT(YEAR FROM SYSDATE) 
                                      - EXTRACT(YEAR FROM data_urodzenia)
                                 FROM KlienciObjTable 
                                 WHERE osoba_id = p_osoba_id
                               )
                              AND k.preferowany_max_wiek >= (
                                 SELECT EXTRACT(YEAR FROM SYSDATE) 
                                      - EXTRACT(YEAR FROM data_urodzenia)
                                 FROM KlienciObjTable 
                                 WHERE osoba_id = p_osoba_id
                               )
                            THEN 1
                            ELSE 0
                          END
                    +
                    0.1 * CASE
                            WHEN (SELECT preferowany_min_wiek
                                  FROM KlienciObjTable
                                  WHERE osoba_id = p_osoba_id)
                                 <= EXTRACT(YEAR FROM SYSDATE) 
                                    - EXTRACT(YEAR FROM k.data_urodzenia)
                              AND (SELECT preferowany_max_wiek
                                   FROM KlienciObjTable
                                   WHERE osoba_id = p_osoba_id)
                                 >= EXTRACT(YEAR FROM SYSDATE) 
                                    - EXTRACT(YEAR FROM k.data_urodzenia) 
                            THEN 1
                            ELSE 0
                          END
                    +
                    0.5 * CASE
                            WHEN
                               (
                                 k.orientacja_seksualna = 'obojetnie'
                                 OR
                                 (k.orientacja_seksualna = 'mezczyzna'
                                   AND (SELECT plec
                                        FROM KlienciObjTable
                                        WHERE osoba_id = p_osoba_id
                                       ) = 'mezczyzna')
                                 OR
                                 (k.orientacja_seksualna = 'kobieta'
                                   AND (SELECT plec
                                        FROM KlienciObjTable
                                        WHERE osoba_id = p_osoba_id
                                       ) = 'kobieta')
                               )
                               AND
                               (
                                 (SELECT orientacja_seksualna
                                  FROM KlienciObjTable
                                  WHERE osoba_id = p_osoba_id
                                 ) = 'obojetnie'
                                 OR
                                 (
                                   (SELECT orientacja_seksualna
                                    FROM KlienciObjTable
                                    WHERE osoba_id = p_osoba_id
                                   ) = 'mezczyzna'
                                   AND k.plec = 'mezczyzna'
                                 )
                                 OR
                                 (
                                   (SELECT orientacja_seksualna
                                    FROM KlienciObjTable
                                    WHERE osoba_id = p_osoba_id
                                   ) = 'kobieta'
                                   AND k.plec = 'kobieta'
                                 )
                               )
                            THEN 1
                            ELSE 0
                          END
                  ) DESC;
        END IF;
    END znajdz_pare;



PROCEDURE dodaj_opinie(
    p_randka_id NUMBER,
    p_klient_id NUMBER,
    p_ocena NUMBER,
    p_komentarz CLOB
) IS
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM RandkiObjTable r
    WHERE r.randka_id = p_randka_id
      AND (DEREF(r.klient1_ref).osoba_id = p_klient_id OR DEREF(r.klient2_ref).osoba_id = p_klient_id);

    IF v_count = 0 THEN
        RAISE_APPLICATION_ERROR(-20005, 'Klient nie uczestniczył w tej randce!');
    END IF;

    INSERT INTO OpinieRandek (randka_id, klient_id, ocena, komentarz)
    VALUES (p_randka_id, p_klient_id, p_ocena, p_komentarz);

    DBMS_OUTPUT.PUT_LINE('Dodano opinię o randce ID=' || p_randka_id || ' dla klienta ID=' || p_klient_id);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Opinia dla tej randki już istnieje!');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Błąd (dodaj_opinie): ' || SQLERRM);
END dodaj_opinie;

PROCEDURE historia_randek(
    p_klient_id NUMBER,
    p_wynik OUT refCursorRandka
) IS
BEGIN
    OPEN p_wynik FOR
        SELECT r.randka_id,
               r.data_spotkania,
               r.miejsce,
               DEREF(r.klient1_ref).imie || ' ' || DEREF(r.klient1_ref).nazwisko AS klient1,
               DEREF(r.klient2_ref).imie || ' ' || DEREF(r.klient2_ref).nazwisko AS klient2,
               (SELECT ocena FROM OpinieRandek o WHERE o.randka_id = r.randka_id AND o.klient_id = p_klient_id) AS ocena,
               (SELECT komentarz FROM OpinieRandek o WHERE o.randka_id = r.randka_id AND o.klient_id = p_klient_id) AS komentarz
        FROM RandkiObjTable r
        WHERE DEREF(r.klient1_ref).osoba_id = p_klient_id OR DEREF(r.klient2_ref).osoba_id = p_klient_id;
END historia_randek;

  PROCEDURE wyszukaj_klienta_po_cechach(
        p_cechy_zadane IN VARCHAR2,
        p_wynik OUT refCursorKlient
    ) IS
    BEGIN
        OPEN p_wynik FOR
            SELECT VALUE(k)
            FROM KlienciObjTable k
            ORDER BY REGEXP_COUNT(k.cechy, '(' || REPLACE(p_cechy_zadane, ',', '|') || ')', 1, 'i') DESC;
    IF NOT p_wynik%FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Nie znaleziono klienta spełniającego podane kryteria.');
    END IF;

    END wyszukaj_klienta_po_cechach;


END PakietBiuro;
/
    /************************************************************
      Obsługa bazy obiektowej (triggery, procedury, obsługa błędów i inne)
     ************************************************************/
     
CREATE OR REPLACE TRIGGER trg_check_randka_self
BEFORE INSERT OR UPDATE ON RandkiObjTable
FOR EACH ROW
DECLARE
    v_id1 NUMBER;
    v_id2 NUMBER;
BEGIN

    SELECT DEREF(:NEW.klient1_ref).osoba_id,
           DEREF(:NEW.klient2_ref).osoba_id
      INTO v_id1, v_id2
      FROM DUAL;

    IF v_id1 = v_id2 THEN
        RAISE_APPLICATION_ERROR(-20001,
            'Ten sam klient nie może być klientem1 i klientem2!');
    END IF;
END;
/

CREATE OR REPLACE TRIGGER trg_check_data_urodzenia
BEFORE INSERT OR UPDATE ON KlienciObjTable
FOR EACH ROW
BEGIN
    IF :NEW.data_urodzenia > SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20002, 'Data urodzenia nie może być w przyszłości!');
    END IF;
END;
/

CREATE TABLE LogOperacji (
    id_log        NUMBER GENERATED BY DEFAULT AS IDENTITY,
    nazwa_tabeli  VARCHAR2(50),
    typ_operacji  VARCHAR2(10),
    data_operacji TIMESTAMP DEFAULT SYSTIMESTAMP,
    szczegoly     CLOB
);
/
ALTER TABLE LogOperacji ADD uzytkownik VARCHAR2(50);
/
CREATE OR REPLACE TRIGGER trg_log_operacji
AFTER INSERT OR UPDATE OR DELETE ON KlienciObjTable
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO LogOperacji (nazwa_tabeli, typ_operacji, szczegoly, uzytkownik)
        VALUES (
            'KlienciObjTable',
            'INSERT',
            'Dodano nowy rekord o ID: ' || :NEW.osoba_id,
            USER
        );
    ELSIF UPDATING THEN
        INSERT INTO LogOperacji (nazwa_tabeli, typ_operacji, szczegoly, uzytkownik)
        VALUES (
            'KlienciObjTable',
            'UPDATE',
            'Zaktualizowano rekord o ID: ' || :NEW.osoba_id,
            USER
        );
    ELSIF DELETING THEN
        INSERT INTO LogOperacji (nazwa_tabeli, typ_operacji, szczegoly, uzytkownik)
        VALUES (
            'KlienciObjTable',
            'DELETE',
            'Usunięto rekord o ID: ' || :OLD.osoba_id,
            USER
        );
    END IF;
END;


/


CREATE OR REPLACE TRIGGER trg_check_double_booking
BEFORE INSERT OR UPDATE ON RandkiObjTable
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_count
    FROM RandkiObjTable
    WHERE data_spotkania = :NEW.data_spotkania
      AND miejsce = :NEW.miejsce;

    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20004, 'Miejsce na randkę jest już zajęte w tym terminie!');
    END IF;
END;
/


DECLARE
    v_cursor PakietBiuro.refCursorKlient;
    v_klient TypKlient;
BEGIN
    v_cursor := PakietBiuro.pobierz_klientow;

    LOOP
        FETCH v_cursor INTO v_klient;
        EXIT WHEN v_cursor%NOTFOUND;

        DBMS_OUTPUT.PUT_LINE(v_klient.pelne_dane);
    END LOOP;

    CLOSE v_cursor;
END;
/

/************************************************************
      ROLE 
************************************************************/

CREATE ROLE Administrator;
GRANT ALL ON KlienciObjTable TO Administrator;
GRANT ALL ON RandkiObjTable TO Administrator;
GRANT ALL ON OpiekunowieObjTable TO Administrator;
GRANT ALL ON LogOperacji TO Administrator;
GRANT EXECUTE ON PakietBiuro TO Administrator;

GRANT CREATE ANY TABLE TO Administrator;
GRANT DROP ANY TABLE TO Administrator;
GRANT CREATE USER TO Administrator;
GRANT DROP USER TO Administrator;
GRANT GRANT ANY PRIVILEGE TO Administrator;

CREATE ROLE Employee;

GRANT SELECT, INSERT, UPDATE ON KlienciObjTable TO Employee;
GRANT SELECT, INSERT ON RandkiObjTable TO Employee;
GRANT SELECT ON OpiekunowieObjTable TO Employee;
GRANT EXECUTE ON PakietBiuro TO Employee;

CREATE USER admin IDENTIFIED BY admin_password;
GRANT Administrator TO admin;

CREATE USER employee_user IDENTIFIED BY employee_password;
GRANT Employee TO employee_user;

-- SELECT ROLE FROM DBA_ROLES WHERE ROLE IN ('ADMINISTRATOR', 'EMPLOYEE');





